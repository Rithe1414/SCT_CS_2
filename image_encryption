from PIL import Image
import numpy as np

def encrypt_image(input_path, output_path, key=50):
    img = Image.open(input_path)
    arr = np.array(img).astype(np.int16)  # Convert to int16 to avoid overflow

    encrypted_arr = (arr + key) % 256

    encrypted_img = Image.fromarray(np.uint8(encrypted_arr))  # Back to uint8
    encrypted_img.save(output_path)
    print(f"Image encrypted and saved as {output_path}")


def decrypt_image(input_path, output_path, key=50):
    img = Image.open(input_path)
    arr = np.array(img).astype(np.int16)  # Convert to int16 to avoid overflow

    decrypted_arr = (arr - key) % 256

    decrypted_img = Image.fromarray(np.uint8(decrypted_arr))
    decrypted_img.save(output_path)
    print(f"Image decrypted and saved as {output_path}")


def swap_pixels(input_path, output_path):
    img = Image.open(input_path)
    arr = np.array(img)

    # Swap pixels (example: reverse rows)
    swapped_arr = arr[::-1]

    swapped_img = Image.fromarray(np.uint8(swapped_arr))
    swapped_img.save(output_path)
    print(f"Image with swapped pixels saved as {output_path}")


if __name__ == "__main__":
    print("=== Image Encryption Tool ===")
    choice = int(input("1. Encrypt\n2. Decrypt\n3. Swap Pixels\nEnter choice: "))

    input_file = input("Enter input image path: ")
    output_file = input("Enter output image path: ")

    if choice == 1:
        key = int(input("Enter key value (e.g., 50): "))
        encrypt_image(input_file, output_file, key)
    elif choice == 2:
        key = int(input("Enter key value used for encryption: "))
        decrypt_image(input_file, output_file, key)
    elif choice == 3:
        swap_pixels(input_file, output_file)
    else:
        print("Invalid choice!")
